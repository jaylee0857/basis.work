import {
  __commonJS
} from "./chunk-OL3AADLO.js";

// node_modules/tabs-slider/dist/js/tabsSlider.js
var require_tabsSlider = __commonJS({
  "node_modules/tabs-slider/dist/js/tabsSlider.js"(exports, module) {
    !function(t, e) {
      typeof exports == "object" && typeof module == "object" ? module.exports = e() : typeof define == "function" && define.amd ? define("TabsSlider", [], e) : typeof exports == "object" ? exports.TabsSlider = e() : t.TabsSlider = e();
    }(window, function() {
      return function(t) {
        var e = {};
        function s(i) {
          if (e[i])
            return e[i].exports;
          var r = e[i] = { i, l: false, exports: {} };
          return t[i].call(r.exports, r, r.exports, s), r.l = true, r.exports;
        }
        return s.m = t, s.c = e, s.d = function(t2, e2, i) {
          s.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: i });
        }, s.r = function(t2) {
          typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
        }, s.t = function(t2, e2) {
          if (1 & e2 && (t2 = s(t2)), 8 & e2)
            return t2;
          if (4 & e2 && typeof t2 == "object" && t2 && t2.__esModule)
            return t2;
          var i = /* @__PURE__ */ Object.create(null);
          if (s.r(i), Object.defineProperty(i, "default", { enumerable: true, value: t2 }), 2 & e2 && typeof t2 != "string")
            for (var r in t2)
              s.d(i, r, function(e3) {
                return t2[e3];
              }.bind(null, r));
          return i;
        }, s.n = function(t2) {
          var e2 = t2 && t2.__esModule ? function() {
            return t2.default;
          } : function() {
            return t2;
          };
          return s.d(e2, "a", e2), e2;
        }, s.o = function(t2, e2) {
          return Object.prototype.hasOwnProperty.call(t2, e2);
        }, s.p = "", s(s.s = 0);
      }([function(t, e, s) {
        s(1), t.exports = s(2);
      }, function(t, e, s) {
      }, function(t, e, s) {
        "use strict";
        function i() {
          return (i = Object.assign || function(t2) {
            for (var e2 = 1; e2 < arguments.length; e2++) {
              var s2 = arguments[e2];
              for (var i2 in s2)
                Object.prototype.hasOwnProperty.call(s2, i2) && (t2[i2] = s2[i2]);
            }
            return t2;
          }).apply(this, arguments);
        }
        s.r(e), s.d(e, "default", function() {
          return r;
        });
        class r {
          constructor(t2, e2) {
            if (typeof t2 == "string" && (t2 = document.querySelector(t2)), !(t2 instanceof HTMLElement))
              throw Error("Check the argument of the selector");
            this.tabs = t2, this.tabs && !this.tabs.activated && (this.tabs.activated = true, this.tabs.setAttribute("data-tabs-active", ""), this.settings = i({ animate: true, slide: 0, rtl: false, draggable: true, underline: true, heightAnimate: true, duration: 500, easing: "cubic-bezier(0.0, 0.0, 0.2, 1)" }, e2), this._init());
          }
          _dragEvent() {
            const t2 = !!("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch);
            return { start: t2 ? "touchstart" : "mousedown", move: t2 ? "touchmove" : "mousemove", end: t2 ? "touchend" : "mouseup", leave: "mouseleave" };
          }
          _init() {
            this.tabsBarWrap = this.tabs.querySelector(".tabs__bar-wrap"), this.bar = this.tabs.querySelector(".tabs__bar"), this.content = this.tabs.querySelector(".tabs__content"), this.controls = Array.prototype.slice.call(this.bar.querySelectorAll(".tabs__controls")), this.sections = Array.prototype.slice.call(this.content.querySelectorAll(".tabs__section")), this.offset = 0, this.currentId = this.settings.slide, this.slidesLen = this.sections.length, this.tabsHasOverflow = false, this.rtl = this.settings.rtl ? 1 : -1, this.transformProperty = "transform", this.transitionProperty = "transition", this._dimmensions(), this.settings.underline && this._setSliderLine(), this.settings.draggable && (this.dragX, this.dragY, this.delta, this.target, this.dragFlag = false, this.isMoving = false, this.preventClick = false), this._addEvents(), this._checkTabsOverflow(), this.show(this.currentId);
          }
          destroy() {
            this._removeEvents(), this.bar.removeChild(this.line), this.content.classList.remove("has-grab"), this.controls[this.currentId].classList.remove("is-active"), this.tabs.removeAttribute("data-tabs-active"), delete this.tabs.activated, Object.keys(this).forEach((t2) => {
              delete this[t2];
            });
          }
          _addEvents() {
            this._handlerClick = this._selectTab.bind(this), this._handlerResize = this._responsive.bind(this), this._handlerTabFocus = this._handlerTabFocus.bind(this), this._handleTabOverflow = this._checkTabsOverflow.bind(this), this.bar.addEventListener("click", this._handlerClick), this.bar.addEventListener("scroll", this._handleTabOverflow), this.content.addEventListener("focus", this._handlerTabFocus, true), window.addEventListener("resize", this._handlerResize), this.settings.draggable && (this.handlerStart = this._start.bind(this), this.handlerMove = this._move.bind(this), this.handlerEnd = this._end.bind(this), this.handlerLeave = this._leave.bind(this), this.handlerLink = this._click.bind(this), this.dragEvent = this._dragEvent(), this.content.addEventListener(this.dragEvent.start, this.handlerStart, { passive: false }), this.content.addEventListener(this.dragEvent.move, this.handlerMove, { passive: false }), this.content.addEventListener(this.dragEvent.end, this.handlerEnd), this.content.addEventListener(this.dragEvent.leave, this.handlerLeave), this.content.addEventListener("click", this.handlerLink));
          }
          _removeEvents() {
            this.bar.removeEventListener("click", this._handlerClick), this.bar.removeEventListener("scroll", this._handleTabOverflow), this.content.removeEventListener("focus", this._handlerTabFocus, true), window.removeEventListener("resize", this._handlerResize), this.settings.draggable && (this.content.removeEventListener(this.dragEvent.start, this.handlerStart, { passive: false }), this.content.removeEventListener(this.dragEvent.move, this.handlerMove, { passive: false }), this.content.removeEventListener(this.dragEvent.end, this.handlerEnd), this.content.removeEventListener(this.dragEvent.leave, this.handlerLeave), this.content.removeEventListener("click", this.handlerLink));
          }
          _handlerTabFocus(t2) {
            const e2 = t2.target.closest(".tabs__section");
            if (!e2)
              return;
            this.tabs.scrollLeft = 0, this.content.scrollTop = 0, setTimeout(() => {
              this.content.scrollTop = 0, this.tabs.scrollLeft = 0;
            }, 0);
            const s2 = this.sections.indexOf(e2);
            this.show(s2);
          }
          _setSliderLine() {
            this.line = i(document.createElement("span"), { className: "tabs__line" }), this.bar.appendChild(this.line), this._moveSliderLine(), this.settings.animate && (this.line.style[this.transitionProperty] = `
        ${this.transformProperty} ${this.settings.duration}ms ${this.settings.easing}
      `);
          }
          _scrollLeft(t2, { to: e2 = 0, duration: s2 = 150 }, i2) {
            const r2 = t2.scrollLeft;
            if (r2 === e2)
              return i2 && i2();
            const n = Date.now(), h = () => {
              const a = Date.now(), o = Math.min(1, (a - n) / s2);
              if (t2.scrollLeft = o * (e2 - r2) + r2, o >= 1)
                return i2 && i2();
              window.requestAnimationFrame(h);
            };
            window.requestAnimationFrame(h);
          }
          _moveSliderLine() {
            const { offsetWidth: t2, offsetLeft: e2 } = this.controls[this.currentId];
            let s2 = `translate3d(${e2}px, 0, 0)`;
            this.line.style.transform = `${s2} scaleX(${t2 / this.w})`;
          }
          _checkTabsOverflow() {
            this.tabsHasOverflow = this.bar.offsetWidth < this.bar.scrollWidth;
            const t2 = this.tabsHasOverflow && this.bar.scrollWidth > this.bar.scrollLeft + this.bar.offsetWidth, e2 = this.bar.scrollLeft > 0;
            this.tabsBarWrap.classList.toggle("has-right-overflow", t2), this.tabsBarWrap.classList.toggle("has-left-overflow", e2);
          }
          _observeTabInViewport() {
            if (!this.tabsHasOverflow)
              return;
            const t2 = this.controls[this.currentId], { offsetWidth: e2, offsetLeft: s2 } = t2;
            let i2 = this.bar.scrollLeft;
            s2 <= this.bar.scrollLeft ? i2 = s2 : s2 + e2 >= this.bar.scrollLeft + this.bar.offsetWidth && (i2 = this.bar.scrollLeft + this.bar.offsetWidth - e2), this._scrollLeft(this.bar, { to: i2 }, () => {
              this._checkTabsOverflow();
            });
          }
          _dimmensions() {
            this.w = this.tabs.offsetWidth;
            const t2 = this.sections[this.currentId].offsetHeight;
            this.sections.forEach((t3) => {
              t3.style.width = this.w + "px";
            }), this.content.style.width = this.w * this.sections.length + "px", this.content.style.height = t2 + "px";
          }
          _responsive() {
            this._dimmensions(), this.offset = this.rtl * (this.w * this.currentId), this._moveSlide(this.offset, false), this._checkTabsOverflow();
          }
          _selectTab(t2) {
            const e2 = t2.target.closest(".tabs__controls");
            if (!e2)
              return;
            t2.preventDefault();
            const s2 = this.controls.indexOf(e2);
            s2 !== this.currentId && this.show(s2);
          }
          _moveSlide(t2, e2 = true) {
            if (this.settings.animate) {
              let t3 = e2 ? this.settings.duration : 0, s3 = [`${this.transformProperty} ${t3}ms ${this.settings.easing}`];
              this.settings.heightAnimate && s3.push(`height ${t3}ms ${this.settings.easing}`), this.content.style[this.transitionProperty] = s3.join(",");
            }
            this.content.style[this.transformProperty] = `translate3d(${t2}px, 0, 0)`;
            const s2 = this.sections[this.currentId].offsetHeight;
            this.content.style.height = s2 + "px", this.settings.underline && this._moveSliderLine();
          }
          _click(t2) {
            this.preventClick && t2.preventDefault(), this.preventClick = false;
          }
          _start(t2) {
            if (this.dragFlag)
              return;
            let e2;
            t2.targetTouches ? (this.target = t2.targetTouches[0].target, e2 = t2.targetTouches[0]) : (e2 = t2, t2.preventDefault()), this.delta = 0, this.dragX = e2.pageX || e2.clientX, this.dragY = e2.pageY || e2.clientY, this.dragFlag = true, this.content.classList.add("has-grab");
          }
          _move(t2) {
            if (!this.dragFlag)
              return;
            let e2 = t2;
            if (t2.targetTouches) {
              if (t2.targetTouches.length > 1 || this.target !== t2.targetTouches[0].target)
                return;
              e2 = t2.targetTouches[0];
            } else
              t2.target.nodeName === "A" && (this.preventClick = true);
            const s2 = e2.pageX || e2.clientX, i2 = e2.pageY || e2.clientY;
            if (this.isMoving || (this.isMoving = Math.abs(this.dragX - s2) >= Math.abs(this.dragY - i2)), this.isMoving) {
              if (t2.preventDefault(), this.delta = (this.dragX - s2) / 2, !this.settings.animate)
                return;
              this._moveSlide(this.offset - this.delta, false);
            }
          }
          _swipeTo() {
            return this.settings.rtl ? this.delta > 0 ? this.currentId - 1 : this.currentId + 1 : this.delta < 0 ? this.currentId - 1 : this.currentId + 1;
          }
          _end() {
            if (!this.dragFlag)
              return;
            const t2 = this._swipeTo();
            if (this.isMoving = false, this.content.classList.remove("has-grab"), Math.abs(this.delta) < 20 || t2 > this.slidesLen - 1 || t2 < 0)
              return this.dragFlag = false, void this._moveSlide(this.offset);
            this.dragFlag = false, this.target = null, this.show(t2);
          }
          _leave() {
            this.dragFlag && (this._moveSlide(this.offset), this.dragFlag = false, this.preventClick = false, this.content.classList.remove("has-grab"));
          }
          recalcStyles() {
            this._responsive();
          }
          show(t2) {
            (t2 = Math.abs(t2)) >= this.slidesLen && (t2 = this.slidesLen - 1), this.controls[this.currentId].classList.remove("is-active");
            const e2 = this.currentId;
            this.currentId = t2, this.offset = this.rtl * (this.w * this.currentId), this._moveSlide(this.offset), this.controls[this.currentId].classList.add("is-active");
            const s2 = new CustomEvent("tabChange", { detail: { currentIndex: this.currentId, prevIndex: e2, currentSlide: this.sections[this.currentId], currentTab: this.controls[this.currentId] } });
            this.tabs.dispatchEvent(s2), this._observeTabInViewport();
          }
        }
      }]).default;
    });
  }
});

// dep:tabs-slider
var tabs_slider_default = require_tabsSlider();
export {
  tabs_slider_default as default
};
/*!
 * @author ivan.kuzmichov@gmail.com
 * @source https://github.com/k-ivan/tabs-slider
 * @description Simple tabs slider in pure JavaScript
 * @license MIT
 */
//# sourceMappingURL=tabs-slider.js.map
